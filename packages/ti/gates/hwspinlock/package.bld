/*
 * Copyright (c) 2011-2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== package.bld ========
 *
 */

/* explicit references to global objects */
var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');
var smpBuild = java.lang.System.getenv("BUILD_SMP");

/* clean lib folder */
Pkg.generatedFiles.$add("lib/");
Pkg.libDir = "package/";

/* add custom files to all releases */
Pkg.attrs.exportSrc = false;
Pkg.attrs.exportCfg = true;

/* list of libraries to build */
var libArray = new Array();
if (smpBuild == "1") {
    /* ti.gates.hwspinlock library for IPU SMP target */
    libArray.push(
        {
            name: "ti.gates.hwspinlock_smp",
            sources: [
                "HwSpinlock"
            ],
            libAttrs: {
                defs: " -DM3_ONLY -DSMP"
            },
            isas: [ "v7M" ],
        }
    );
}
else {
    /* ti.gates.hwspinlock library for IPU non-SMP target */
    libArray.push(
        {
            name: "ti.gates.hwspinlock",
            sources: [
                "HwSpinlock",
            ],
            libAttrs: {
                defs: " -DM3_ONLY"
            },
            isas: [ "v7M" ],
        }
    );

    /* ti.gates.hwspinlock library for DSP target */
    libArray.push(
        {
            name: "ti.gates.hwspinlock",
            sources: [
                "HwSpinlock",
            ],
            libAttrs: {
                defs: " -DDSP"
            },
            isas: [ "64T" ],
        }
    );

    /* ti.gates.hwspinlock library for DSP target */
    libArray.push(
        {
            name: "ti.gates.hwspinlock",
            sources: [
                "HwSpinlock",
            ],
            libAttrs: {
                defs: " -DDSPC674"
            },
            isas: [ "674" ],
        }
    );
}

/* generate the package libraries */
/* check if profile specified in XDCARGS */
/* XDCARGS="... profile=debug ..." */
var cmdlProf = (" " + arguments.join(" ") + " ").match(/ profile=([^ ]+) /);
cmdlProf = cmdlProf != null ? cmdlProf[1] : null;

/* ==== loop over array of libraries ==== */
for (var i = 0; i < libArray.length; i++) {
    var lib = libArray[i];

    /* ==== loop over all targets in build array ==== */
    for (var j = 0; j < Build.targets.length; j++) {
        var targ = Build.targets[j];

        /* skip target if not compatible with source code */
        if ("icw" in lib) {
            var skipTarget = true;
            var targIsaChain = "/" + targ.getISAChain().join("/") + "/";
            for (var k = 0; k < lib.icw.length; k++) {
                if (targIsaChain.match("/" + lib.icw[k] + "/")) {
                    skipTarget = false;
                    break;
                }
            }
            if (skipTarget) continue;
        }

        /* skip target if it does not generate code for the given isa */
        if ("isas" in lib) {
            var skipTarget = true;
            var list = "/" + lib.isas.join("/") + "/";
            if (list.match("/" + targ.isa + "/")) {
                skipTarget = false;
            }
            if (skipTarget) continue;
        }

        /* ==== loop over all profiles ==== */
        for (var profile in targ.profiles) {

            /* skip profile if different than specified on command line */
            if ((cmdlProf != null) && (profile != cmdlProf)) {
                continue;
            }

            /* name = lib/profile/name.a+suffix */
            var name = "lib/" + profile + "/" + lib.name;

            /* pass along library attributes specified in library array */
            var libAttrs = "libAttrs" in lib ? lib.libAttrs : {};

            /* must set profile explicitly */
            libAttrs.profile = profile;

            /* build the library */
            var library = Pkg.addLibrary(name, targ, libAttrs);

            /* add the source files */
            library.addObjects(lib.sources);
        }
    }
}
