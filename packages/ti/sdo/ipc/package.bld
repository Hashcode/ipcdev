/*
 * Copyright (c) 2010-2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== package.bld ========
 */
var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');
var IpcBuild = xdc.loadCapsule("ti/sdo/ipc/Build.xs");

var objList = [
    "Notify.c",
    "GateMP.c",
    "Ipc.c",
    "MessageQ.c",
    "SharedRegion.c",
    "ListMP.c"
];

/* if not building a product release, build package libraries */
if (Bld_goal != "release") {
    IpcBuild.buildLibs(objList, undefined, null, arguments);
    IpcBuild.buildLibs(objList, undefined, null, ["profile=smp"]);
}

Pkg.otherFiles = [
    "package.bld",
    "linkcmd.xdt",
    "_GateMP.h",
    "_ListMP.h",
    "_Notify.h",
    "_MessageQ.h",
    "_SharedRegion.h",
    "_Ipc.h",
    "Ipc.c",
    "makefile.xdt",
    "debugMakefile.xdt",
    "makefile_gccArmLto.xdt",
    "instrumented.cfg.xs", "nonInstrumented.cfg.xs",
    "instrumented.cfg", "nonInstrumented.cfg",
    "smpInstrumented.cfg", "smpNonInstrumented.cfg"
].concat(objList);

var testArray = [
    {   name: 'instrumented',
        config: "instrumented.cfg",
        libdir: "instrumented"
    },
    {   name: 'nonInstrumented',
        config: "nonInstrumented.cfg",
        libdir: "nonInstrumented"
    }
];

/* Build non-SMP pre-built libs */
for (var t = 0; t < Build.targets.length; t++) {
    var targ = Build.targets[t];

    /* For each test... */
    for each (var test in testArray) {
        var platform = test.platform ? test.platform : targ.platform;

        var cfg = Pkg.addConfiguration(test.name,
                                        targ, platform, {
                                        cfgScript: test.config,
                                        prelink: false,
                                        exportCfg: false,
                                        exportSrc: false,
                                        profile: "release"
                                     });

        var myLib = "lib/ipc/"
                + test.libdir + "/ipc.a" + targ.suffix;

        Pkg.otherFiles[Pkg.otherFiles.length++] = myLib;
    }
}

var smpTestArray = [
    {   name: 'smpInstrumented',
        config: "smpInstrumented",
        libdir: "instrumented",
    },
    {   name: 'smpNonInstrumented',
        config: "smpNonInstrumented",
        libdir: "nonInstrumented",
    },
];

/* Build SMP pre-built libs */
for each (var targ in Build.targets) {

    if (targ.profiles["smp"] === undefined) continue;

    /* For each test... */
    for each (var test in smpTestArray) {
        var platform = test.platform ? test.platform : targ.platform;

        var cfg = Pkg.addConfiguration(test.name,
                                        targ, platform, {
                                        cfgScript: test.config,
                                        prelink: false,
                                        exportCfg: false,
                                        exportSrc: false,
                                        profile: "release"
                                     });

        var myLib = "lib/smpipc/"
                + test.libdir + "/ipc.a" + targ.suffix;

        Pkg.otherFiles[Pkg.otherFiles.length++] = myLib;
    }
}

/* include source files in the release package */
Pkg.attrs.exportSrc = true;
Pkg.attrs.exportCfg = true;

Pkg.generatedFiles.$add("lib/");
Pkg.generatedFiles.$add("custom/");
