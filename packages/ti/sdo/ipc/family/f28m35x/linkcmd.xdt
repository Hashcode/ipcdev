%%{
/*
 * Copyright (c) 2012-2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
%%}
%%{
/*
 *  Add writeAddr with writeAddrSize to linker cmd file.
 *  This is to prevent the user from placing other code/data
 *  in the same memory location.
 */
%%}
%var IpcMgr = xdc.module("ti.sdo.ipc.family.f28m35x.IpcMgr");
%
%

SECTIONS
{
%    var readSectName = "ti.sdo.ipc.family.f28m35x.IpcMgr.readSect";
%    var writeSectName = "ti.sdo.ipc.family.f28m35x.IpcMgr.writeSect";
%    if (IpcMgr.genLinkerSections && (IpcMgr.readAddr || IpcMgr.writeAddr)) {
%        var readAddr = utils.toHex(IpcMgr.readAddr);
%        var writeAddr = utils.toHex(IpcMgr.writeAddr);
%        var len  = utils.toHex(IpcMgr.sharedMemSizeUsed);
%
%        if (Program.build.target.name.match(/C28.*/)) {
    `readSectName`:  { . += `len`;} run > `readAddr` PAGE 1, type = NOLOAD
    `writeSectName`:  { . += `len`;} run > `writeAddr` PAGE 1, type = NOLOAD
%        }
%        else {
    `readSectName`:  { . += `len`;} run > `readAddr`, type = NOLOAD
    `writeSectName`:  { . += `len`;} run > `writeAddr`, type = NOLOAD
%        }
%    }
}
