/*
 * Copyright (c) 2012-2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


//print ("Program.cpu.deviceName = " + Program.cpu.deviceName);
//print ("Program.platformName = " + Program.platformName);

/* This will match for omap5 SMP only: */
if (Program.platformName.match(/ipu/)) {
    /* This initializes the MessageQ Transport RPMSG stack:  */
    xdc.loadPackage('ti.ipc.ipcmgr');
    var BIOS        = xdc.useModule('ti.sysbios.BIOS');
    BIOS.addUserStartupFunction('&IpcMgr_ipcStartup');

    var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
    var params = new HeapBuf.Params;
    params.align = 8;
    params.blockSize = 512;
    params.numBlocks = 256;
    var msgHeap = HeapBuf.create(params);

    var MessageQ  = xdc.useModule('ti.sdo.ipc.MessageQ');
    MessageQ.registerHeapMeta(msgHeap, 0);

    var Diags = xdc.useModule('xdc.runtime.Diags');
    var VirtioSetup = xdc.useModule('ti.ipc.transports.TransportVirtioSetup');
    VirtioSetup.common$.diags_INFO = Diags.RUNTIME_OFF;

    xdc.loadCapsule("ti/configs/omap54xx/IpcCommon.cfg.xs");
    xdc.includeFile("ti/configs/omap54xx/IpuSmp.cfg");
    xdc.includeFile("ti/configs/omap54xx/IpuAmmu.cfg");
}
else {
    xdc.loadCapsule("messageq_common.cfg.xs");
}

var MessageQ  = xdc.useModule('ti.sdo.ipc.MessageQ');

var VirtioSetup = xdc.useModule('ti.ipc.transports.TransportVirtioSetup');
MessageQ.SetupTransportProxy = VirtioSetup;

var NameServer = xdc.useModule("ti.sdo.utils.NameServer");
var NsRemote = xdc.useModule("ti.ipc.namesrv.NameServerRemoteRpmsg");
NameServer.SetupProxy = NsRemote;

var TransportVirtio = xdc.useModule('ti.ipc.transports.TransportVirtio');
