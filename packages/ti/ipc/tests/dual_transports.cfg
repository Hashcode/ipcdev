/*
 * Copyright (c) 2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


/*
 * We don't use MultiProcSetup, but we have to pull it in first to shut it
 * up so it doesn't causes MultiProc ids to be set in a Startup_first fxn.
 */
if (Program.platformName.match(/6614/)) {
    MultiProcSetup = xdc.useModule('ti.sdo.ipc.family.c647x.MultiProcSetup');
}
else if (Program.platformName.match(/simKepler/) ||
        Program.cpu.deviceName.match(/^TMS320TCI6638$/)) {
    MultiProcSetup = xdc.useModule('ti.sdo.ipc.family.tci663x.MultiProcSetup');
}
MultiProcSetup.configureProcId = false;

/* Nothing in here uses IPC tree Settings.xs: */
xdc.loadCapsule("messageq_common.cfg.xs");

/*
 * Plug shared Interrupt used in TransportRpmsg into NotifyDriverShm, before
 * Settings.xs does it:
 */
if (Program.platformName.match(/6614/)) {
    var NotifyDriverShm =
        xdc.useModule('ti.sdo.ipc.notifyDrivers.NotifyDriverShm');
    var Interrupt = xdc.useModule('ti.ipc.family.tci6614.Interrupt');
    NotifyDriverShm.InterruptProxy = Interrupt;
}
else if (Program.platformName.match(/simKepler/) ||
        Program.cpu.deviceName.match(/^TMS320TCI6638$/)) {
    var NotifyDriverCirc =
       xdc.useModule('ti.sdo.ipc.notifyDrivers.NotifyDriverCirc');
    var Interrupt = xdc.useModule('ti.ipc.family.tci6638.Interrupt');
    NotifyDriverCirc.InterruptProxy = Interrupt;
}

/*
 * Notify brings in the ti.sdo.ipc.family.Settings module, which does
 * lots of config magic which will need to be UNDONE later, or setup earlier,
 * to get the necessary overrides to various IPC module proxies!
 */
var Notify                  = xdc.module('ti.sdo.ipc.Notify');
var Ipc                     = xdc.useModule('ti.sdo.ipc.Ipc');

/* Note: Must call this to override what's done in Settings.xs ! */
if (Program.platformName.match(/6614/)) {
    Notify.SetupProxy = xdc.module('ti.ipc.family.tci6614.NotifySetup');
}
else if (Program.platformName.match(/simKepler/) ||
        Program.cpu.deviceName.match(/^TMS320TCI6638$/)) {
    Notify.SetupProxy = xdc.module('ti.ipc.family.tci6638.NotifyCircSetup');
}

/* Synchronize all processors (this will be done in Ipc_start()) */
Ipc.procSync = Ipc.ProcSync_ALL;
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.addUserStartupFunction('&IpcMgr_callIpcStart');

/* Shared Memory base address and length */
var SHAREDMEM           = 0x0C000000;
var SHAREDMEMSIZE       = 0x00200000;

/*
 *  Need to define the shared region. The IPC modules use this
 *  to make portable pointers. All processors need to add this
 *  call with their base address of the shared memory region.
 *  If the processor cannot access the memory, do not add it.
 */
var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');
SharedRegion.setEntryMeta(0,
    { base: SHAREDMEM,
      len:  SHAREDMEMSIZE,
      ownerProcId: 1,  /* Ensure CORE0 SR0 is owner, NOT HOST! */
      isValid: true,
      name: "MSMC SRAM",
    });

/* TBD: Application specific: move out of here to yet another .cfg file: */

/* Modules explicitly used in the application */
var HeapBufMP   = xdc.useModule('ti.sdo.ipc.heaps.HeapBufMP');

var Semaphore   = xdc.useModule('ti.sysbios.knl.Semaphore');
Program.global.semStartMultiCoreTest = Semaphore.create(0);
