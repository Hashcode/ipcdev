/*
 * Copyright (c) 2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


/* This initializes the RPMSG stack */
xdc.loadPackage('ti.ipc.ipcmgr');
var BIOS        = xdc.useModule('ti.sysbios.BIOS');
BIOS.addUserStartupFunction('&IpcMgr_ipcStartup');

/* Bring in the platform-specific config */
if (Program.cpu.deviceName.match(/^OMAP5430$/) &&
        Program.cpu.attrs.cpuCore.match(/^CM4$/)) {
    xdc.loadCapsule("ti/configs/omap54xx/IpcCommon.cfg.xs");
    xdc.includeFile("ti/configs/omap54xx/IpuSmp.cfg");
    xdc.includeFile("ti/configs/omap54xx/IpuAmmu.cfg");
}
else if (Program.cpu.deviceName.match(/^OMAP5430$/) &&
        Program.cpu.attrs.cpuCore.match(/^64T$/)) {
    xdc.includeFile("ti/configs/omap54xx/Dsp.cfg");
    xdc.includeFile("ti/configs/omap54xx/DspAmmu.cfg");
}
else if (Program.platformName.match(/^ti\.platforms\.evmDRA7XX/) &&
         Program.cpu.attrs.cpuCore.match(/^CM4$/)) {
    xdc.loadCapsule("ti/configs/vayu/IpcCommon.cfg.xs");
    if (Program.platformName.match(/^ti\.platforms\.evmDRA7XX\:ipu1/)) {
        xdc.includeFile("ti/configs/vayu/Ipu1Smp.cfg");
    }
    else {
        xdc.includeFile("ti/configs/vayu/Ipu2Smp.cfg");
    }
    xdc.includeFile("ti/configs/vayu/IpuAmmu.cfg");
}
else if (Program.platformName.match(/^ti\.platforms\.evmDRA7XX/) &&
         Program.cpu.attrs.cpuCore.match(/^6600$/)) {
    if (Program.platformName.match(/^ti\.platforms\.evmDRA7XX\:dsp1/)) {
        xdc.includeFile("ti/configs/vayu/Dsp1.cfg");
    }
    else {
        xdc.includeFile("ti/configs/vayu/Dsp2.cfg");
    }
}
else {
    xdc.loadCapsule("messageq_common.cfg.xs");
}

var VirtioSetup = xdc.useModule('ti.ipc.transports.TransportRpmsgSetup');

var NameServer = xdc.useModule("ti.sdo.utils.NameServer");
var NsRemote = xdc.useModule("ti.ipc.namesrv.NameServerRemoteRpmsg");
NameServer.SetupProxy = NsRemote;
