/*
 * Copyright (c) 2011-2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 *  ======== package.bld ========
 */

var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');
var smpBuild = java.lang.System.getenv("BUILD_SMP");

Pkg.attrs.exportSrc = true;

Pkg.otherFiles = ["package.bld", "Rpmsg.h", "virtio_ring.h", "_MessageQCopy.h",
                        "MessageQCopy.h", "NameMap.h"];

var SRCS = ["MessageQCopy.c", "NameMap.c"];

/* remove this output directory during a clean */
Pkg.generatedFiles.$add("lib/");


for (var i = 0; i < Build.targets.length; i++) {
    var targ = Build.targets[i];
    var isaDefs = "";
    var name = Pkg.name;

    print("targ.isa: " + targ.isa);
    print("smpBuild: " + smpBuild);

    /* Yuck, yuck, yuck! */
    if (targ.isa == "674") {
        isaDefs = "-DOMAPL138";
    } else if (targ.isa == "66") {
        /* TBD: Only one of Appleton or Kepler can build for now: */
	isaDefs = "-DTCI6638";
	//isaDefs = "-DTCI6614";
    } else if (targ.isa == "v7M") {
        if (smpBuild == "1") {
            isaDefs = "-DOMAP5 -DSMP";
            name = name + "_smp";
        }
        else {
            isaDefs = "-DOMAP5 -DDM3_ONLY";
        }
    } else if (targ.isa == "64T" && smpBuild == 0) {
        isaDefs = "-DOMAP5 -DDSP";
    } else {
        continue;
    }

    print("name: " + name);
    print("isaDefs: " + isaDefs);

    /* Build for all profiles */
    for (var profile in targ.profiles) {

	Pkg.addLibrary("lib/" + profile + "/" + name, targ, {
	    profile: profile,
	    copts: "--gcc",   /* b/c Rpmsg.h requires gcc-isms */
	    defs: isaDefs
	}).addObjects(SRCS);
    }
}
