/*
 * Copyright (c) 2012-2013, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* -------------------------------- CORE1 ----------------------------------*/
var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
MultiProc.setConfig("CORE1", ["HOST", "CORE0", "CORE1", "DSP"]);

/* Required to run BIOS on AppM3 (core 1) */
var Core = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
Core.id = 1;

/* ----------------------------- TICK ---------------------------------------*/
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
Clock.tickSource = Clock.TickSource_USER;
/* Configure GPTimer4 as BIOS clock source */
Clock.timerId = 1;

var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var timerParams = new Timer.Params();
timerParams.period = Clock.tickPeriod;
timerParams.periodType = Timer.PeriodType_MICROSECS;
/* Smart-idle wake-up-capable mode */
timerParams.tiocpCfg.idlemode = 0x3;
/* Wake-up generation for Overflow */
timerParams.twer.ovf_wup_ena = 0x1;
Timer.create(Clock.timerId, Clock.doTick, timerParams);

/* Modules used in Power Management */
xdc.loadPackage('ti.pm');
var Power = xdc.useModule('ti.sysbios.family.arm.ducati.omap4430.Power');
Power.loadSegment = "PM_DATA";

/* Idle functions - PM functions should be last */
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
Idle.addFunc('&VirtQueue_cacheWb');    /* Function to flush unicache in idle */
Idle.addFunc('&ti_deh_Deh_idleBegin'); /* Watchdog detect idle function */
Idle.addFunc('&IpcPower_idle');        /* IpcPower_idle must be at the end */

/*
 * These lines coerce BIOS into creating a unique interrupt vector table for
 * each core. Core 0's interrupt vector table is placed at 0x400, Core 1's
 * is placed at 0x800.
 *
 * Additionally, because both sections (.vecs AND .resetVecs) are placed at
 * the same address, BIOS will NOT generate a vector table that gets placed
 * at location 0.
 *
 * A common vector table that gets placed at address 0 is being inserted into
 * the load image by the script that combines the two M3 programs into a
 * single load image.
 */
Program.sectMap[".resetVecs"].loadAddress = (Core.id + 1) * 0x400;
Program.sectMap[".vecs"].loadAddress      = (Core.id + 1) * 0x400;

Program.sectMap[".tracebuf"] = "TRACE_BUF";
Program.sectMap[".errorbuf"] = "EXC_DATA";

/*
 * Add support for offloading algorithms.
 * The section is placed at an unused address in the common segment.
 */
Program.sectMap[".interm3offload"] = new Program.SectionSpec();
Program.sectMap[".interm3offload"].loadAddress = 0x2000;
