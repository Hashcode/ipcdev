;
;  Copyright (c) 2012-2013, Texas Instruments Incorporated
;  All rights reserved.
;
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
;
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
;
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
;
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
;
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
;
; ======== GateAAMonitor_asm.s64P ========
;
;! Revistion History
;! =================
;! 21-Jul-2009 skp      Pulled from tci6486 code in drivers tree.
;!                  Interrupts are re-enabled before return

        .cdecls     C,NOLIST,"package/internal/GateAAMonitor.xdc.h"

        .if $isdefed("__TI_ELFABI__")
          .if __TI_ELFABI__
            .asg ti_sdo_ipc_gates_GateAAMonitor_getLock__I, _ti_sdo_ipc_gates_GateAAMonitor_getLock__I
          .endif
        .endif

        .global _ti_sdo_ipc_gates_GateAAMonitor_getLock__I

        .asg        0x01840044, L1DCC

;
;  ======== _ti_sdo_ipc_gates_GateAAMonitor_getLock ========
;  This function is a spin loop to try to get the lock.
;  Assuming all cores are trying to get the same lock,
;  The first core to successfully execute LL-SL-CMTL before another core
;  can execute LL will get the lock. To prevent deadlock situations
;  from happening for a 6-core GEM device, we have inserted NOPs into the code.
;
;  We are doing the following to work around several GEM bugs. See GEM DATA
;  MEMORY CONTROLLER rev 1.03 or later section 2.3.8 for more details:
;      1. Disable interrupts before LL, re-enable after CMTL if we don't get
;         the lock.
;      2. Freeze L1D cache before LL and unfreeze L1D cache after CMTL
;      3. No memory accesses are in the cycle before, after or in parallel
;         with LL, SL, and CMTL.
;      4. Doing an 'mvk' instruction on the D2 unit in the cycle before and
;         after each of LL, SL, and CMTL to block EDI (Emulation) accesses
;         on these cycles.
;
;
    .sect ".text:_ti_sdo_ipc_gates_GateAAMonitor_getLock__I"
    .clink
_ti_sdo_ipc_gates_GateAAMonitor_getLock__I:
        mvc     DNUM, b5    ; get the DNUM value
||      mvkl    L1DCC, a5   ; L1D cache control register
        add     b5, 1, b5   ; setup DNUM + 1 to be stored in lock address
||      mvkh    L1DCC, a5
        mv      a4, b2      ; copy address to B side
||      mvk     1, a0       ; value to put into L1DCC.OPER to freeze
        mvc     TSR, b4     ; save away current TSR value
        mv      b4, a4      ; set return value to old TSR value
||      mvk     1, b7
spin_lock:
        stw     a0, *a5     ; freeze L1D cache
||      dint                ; disable interrupts
        ldw     *a5, a2     ; get previous freeze
  [!a0] mvk.d2  0, b6       ; never executed
        ll.d2   *b2, b0     ; read and monitor address
  [!a0] mvk.d2  0, b6       ; never executed
        nop     2
  [!a0] mvk.d2  0, b6       ; never executed
  [!b0] sl.d2   b5, *b2     ; store DNUM + 1 into lock address
        zero.d2 b1          ; set b1 = 0
  [!b0] cmtl.d2 *b2, b1     ; commit the store, if successful, b1 = 1.
  [!a0] mvk.d2  0, b6       ; never executed
        shru    a2, 16, a2  ; shift L1DCC.POPER down to L1DCC.OPER
        stw     a2, *a5     ; restore previous frozen/non-frozen state
        rint                ; restore interrupts

  [ b1] bnop    b3, 5       ; if successful, return with interrupts disabled
                            ; note: return happens before 'rint'.

        add     b5, b7, b0
||      saddu4  b7, b7, b7
wait:
  [ b0] bdec    wait, b0
        nop     5
        bnop    spin_lock, 5 ; spin around if not successful
